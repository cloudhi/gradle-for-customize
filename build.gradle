import com.android.builder.core.DefaultManifestParser

apply plugin: 'com.android.application'

buildscript {
    //支持java 依赖库管理（maven/ivy）,用于项目的依赖
    repositories {
        mavenCentral()
    }

    //依赖包的定义。支持maven/ivy，远程，本地库，也支持单文件
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
    }
}

// 第三方依赖
dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
    compile 'com.android.support:appcompat-v7:21.+'
    compile 'com.android.support:recyclerview-v7:+'
}

android {
    compileSdkVersion 21
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.ruijun.demo"
        minSdkVersion 16
        targetSdkVersion 21
        versionCode 1001

        // 配置R.bool.debug 的值,在代码里依据这个值来判断是测试或者正式版本
        // 可以为不同版本定制化代码
        resValue "bool", "debug", "true"
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }


    //设置包签名字段
    signingConfigs {
//        debug{
//            storeFile file("debug.keystore")
//        }

        myConfig{
            storeFile file("demo.keystore") // 签名文件名字
            storePassword KEYSTORE_PASSWORD
            keyAlias "demo.keystore"// 签名文件别名
            keyPassword KEYSTORE_PASSWORD
        }
    }

    // 不同渠道
    //productFlavors {
//        flavor1 {
//            versionName '1.0'
//        }
//
//        flavor2 {
//            versionName '1.0'
//        }
//
//    }

    //用来指定最终编译字段配置
    buildTypes {
        debug {
            resValue "bool", "debug", "true"
            signingConfig  signingConfigs.myConfig
            minifyEnabled true // 是否混淆
            shrinkResources true // 是否去除无效的资源文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            resValue "bool", "debug", "false"
            signingConfig  signingConfigs.myConfig
            minifyEnabled true // 是否混淆
            shrinkResources true // 是否去除无效的资源文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //这个是解决lint报错的代码
    lintOptions {
        abortOnError false
    }

    //该字段下主要配置一些项目资源路径
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

        instrumentTest.setRoot('tests')
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')

    }
}

android.applicationVariants.all{ variant ->
    def apk = variant.outputs[0].outputFile;
    // def versionName = android.defaultConfig.versionName;
    def manifestParser = new DefaultManifestParser()
    def newName = ""
    def versionName = ""
    if (variant.buildType.name == "release") {
        // 获取versionName
        versionName = manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile);
    } else {
        versionName = manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile) + "d";
    }

    // 输出的apk名称
    newName = "Demo_V${versionName}_${variant.buildType.name}.apk";
    def outputPath = "/Users/ruijun/App/"
    variant.outputs[0].outputFile = new File(outputPath, newName);
//    variant.outputs[0].outputFile = new File(apk.parentFile, newName);
}
